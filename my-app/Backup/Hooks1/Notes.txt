Hooks is used in functional component 

We can update the state value in hooks...

Hooks is like props only

-------------
Why Hooks?
Bcaz it can update the state values
It avoids changing in environment

------------
Hooks basically defines as destructured array
Ex: const [arr, setArr]= useStte()
-----------
Rules:
1. Only call the hooks at the top level
2. Only call hook sfrom the react functions
****************************************************************************
1. useState()
it lets us to add state to functional components
-> IN class the state always an object. But in functional it can be object array number string boolean
Ex: const [count,setCount]= useState()
=> use spread operator for get the rest of the data in the object
=> It returns tow elements
 -> 1. value
 -> 2. Setter Function

******************************************************************************
2. useEffect()

Consider updating the doc title to the current counter value
Ex: in class,
    componentDidMount(){
        doc.title = `You clicked ${this.state.count} times`
    }
    componentDidUpdate(){
        doc.title = `You clicked ${this.state.count} times`
    }
In class component We have component life cycle like Componentdidupdate, componentwillmount, componentwillunmount and so on
We can use "useEffect() " hook to avoid the above side effects
-> We can perform entire Component Life Cycle in the useEffect() Hook

Proper Explanantion of useEffect():
-> 1. This lets you perform side effects in functioal components
-> 2. It is close replacemnet for the componentdidmount, componentwillmount, componentwillunmount

useEffect() takes an argument.
it executes after render method is executed
it runs after every render of the component

for conditionally executing an effecting we use one extra dependencies like one array
Ex: useEffect(()=>{

},[])

inordeer to conditionally ru specify the second parameterr as array

---> Run effects only once
--> The cleanup code cancelling subscription --> use return and remove

---> If youu want to watch the variable add it to the dependecies []
---> If you want to use the function within useEffect(), Just define the function within useEffect()

******************************************************************************************************************

3. useContext()

What is react context?
--->Context provides a way to pass data throught the componenet treee without having to pass props down manually at every level
    (If we have nested component , and we need to share the details of one component to another component we use the props method,
     But instead of props method we can use useContext() Hook)

3 steps to implement context...
1--> Create a context in the app component  
2--> Create UserContext.provider
3--> consume the component values  

We have two ways to render a context
--> import useState
--> import necessary contxt like import channelcontext from "../App"
******************************************************************************************

4.useReducer()

what is useReducer?
it is hook used for statemanagement
it is an alternative for useState()
diff...?
useState is built using useReducer(). So useReducer is primitive hook

reduce in JS                               ||| useReducer in React
array.reduce(reducer, initialvalue)        ||| useReducer(reducer, initialState)
singleValue = reducer(acc, itemValue)      ||| newState = reducer(currentState, action)
* reduce method returns a single value     ||| it returns a pair of values [newState, dispatch]

We hve to import useReducer from react

///usereducer with useContext
----> sometimes we want to share the data between components
s1: create counter using usereducer
s2: consume the data
////When to useReducer or useState?////

==> both of them are meant to use for state management
    -----------------------------------------------------------------------------
  |  Scenario                     | usestate            |    useReducer          |
    -----------------------------------------------------------------------------
  |  Type of state                | Number,string,bool  | Object or Array        |
  |  No of transitions            | one or two          | Too many               |
  |  Related to state transitions | No                  | Yes                    |
  |  Business Logic               | No business logic   | Complex business logic |
  |  Local vs global              | Local               | Global                 | 
    ----------------------------------------------------------------------------



*********************************************************************************************
5. useCallback()
--> first of all , lets take an example if you hav ea multiple components and you are clicking something 
It will rendering the entire component list...
--> But we dont have to re render the unwanted component
To solve this we use, [react.memo]
-> react.memo is nothing but a higher order component that will prevent functional component rerendering
the state value also not changed
===>> So we have to export like React.Memo(component)
By doing this re render is happen within the component

Here only """useCallback() hook""" is introduced
What is useCallback()?
it will return memorized version of the callback functions that only changes if one of the dependecies has changed

Why?
It os useful passing callbacks to optimized child components taht rely on reference equality to ""prevent unnecessary renders""

How to use?
1.import useCallback from react
2. add the function useCallback()
   it have two parameters 
   one is fat arrow function another one is dependecy

Why is useCallback worse?
Bcaz we have to define a function and a dependecies array
useCallback is used for performance optimization

******************************************************************************************
6.useMemo()
--> useMemo() hook is also used for performance optimization
everytime the state update if the function is called
so we need to tell react do not calculate unnecessary functions or componnets

To solve this
1.import useMemo()
2. add function useMemo()
-> 2 arguments FA function and dependencies

if you need to cache a func use useCallback()
if you need to cache a result of an invoked func use useMemo()


****************************************************************************************
7.useRef()
used to access DOM nodes in functional component 
----> import useRef
----> We can use that for Dom nodes like focus
----> We can clear the interval within the effect hook but not outside of the effect hook ...
Here comes useRef
----> It doesn't cayse any changes while its render

*******************************
8.useImperativeHandle()
import useImperativeHandle, Ref, forwardref
--> first we have to know about forwarding Ref
--> Forwarding the unused content to the parent component
---> we first have to understand the concept of forwarding refs using the React.forwardRef function. This allows us to pass refs to nested components, because we cannot achieve so using the ref keyword. After that, we will make use of the useImperativeHandle hook inside an input to modify the forwarded ref by exposing a custom focusAndBlur property. The useImperativeHandle hook will allow us to call that method from the parent component using a button.
****************************
9.useLayoutEffect()
It runs before the browser  renders.... But useEffect ender after all the compilation
It is almost similar to useEffect()
the only diff is blocking visual updates,like paint before rendering
*****************************
10.usedebugValue()
-> import usedebugValue
-> it allows you to display label for a custom hook in the React devTools
-> LOcal storage value is changes in consoles component
*************************************************************************************************************************************************************************
11. Custom Hooks()
-It is a JS function whose name starts with use
- it can call other hooks if required
Why?
Share logic b/w components


